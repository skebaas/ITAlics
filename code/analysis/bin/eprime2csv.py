#!/usr/bin/env python3

import sys
import os
import re
import subprocess
import pandas as pd

def trim(s):
    return s.strip()

def process(map):
    frame = map['LogFrame']
    columns.setdefault(frame, {})
    data.setdefault(frame, [])

    for key in map:
        columns[frame][key] = 1

    row = {}
    for key in map:
        val = map[key]
        row[key] = val

    data[frame].append(row)

def save_line(i, line):
    if not out_files[i]:
        if output:
            out_files[i] = open(f"{output}.{i}.csv", "w")
        else:
            out_files[i] = sys.stdout

    f = out_files[i]
    f.write(line + "\n")

input = sys.argv[1]
logFrame = None
output = None

if not input or not os.path.exists(input):
    sys.stderr.write("Usage: eprime2csv <eprime txt file> [frame] [output csv prefix]\n")
    sys.stderr.write("  Converts E-Prime txt experiment file to tabular CSV file\n")
    sys.stderr.write("  <eprime txt file> - an experiment text file generated by E-Prime\n")
    sys.stderr.write("  [frame] - optionally output only a given log frame\n")
    sys.stderr.write("  [output csv prefix] - output csv file prefix, if not given\n")
    sys.stderr.write("  writes output to the same location as input text file.\n")
    sys.exit(1)

if len(sys.argv) > 2:
    if sys.argv[2].isdigit():
        logFrame = int(sys.argv[2])
        if len(sys.argv) > 3:
            output = sys.argv[3]
    else:
        output = sys.argv[2]

if not output:
    output = os.path.splitext(input)[0]

line, block, level = None, None, None
map, columns, data = {}, {}, {}
out_files = [None] * 100

if subprocess.call(f'file --mime "{input}" | grep -q utf-16', shell=True) == 0:
    subprocess.call(f'iconv -f utf-16 -t utf-8 "{input}" > tmp.txt', shell=True)
    subprocess.call(f'mv tmp.txt "{input}"', shell=True)

with open(input, 'r') as file:
    main_dict = {"LogFrame": []}
    for line in file:
        line = line.strip()
        #print(line)
        #print((block, level))
        if re.match(r'^(?!.*Header)(\*\*\* (.*) Start \*\*\*)', line):
            block = re.match(r'\*\*\* (.*) Start \*\*\*', line).group(1)
            #print(re.match(r'\*\*\* (.*) Start \*\*\*', line))
            #print(level)
            map = {block: level}
        elif re.match(r'^(?!.*Header)(\*\*\* (.*) End \*\*\*)', line):
            block = ''
            #print(line)
            if logFrame:
                if map['LogFrame'] == logFrame:
                    #print('executing')
                    process(map)
            else:
                #print(map)
                try:
                    main_dict[f'Level_{map["LogFrame"]}'].append(map)
                except KeyError:
                    main_dict[f'Level_{map["LogFrame"]}'] = [map]
                #process(map)
        elif block:
            #print(block)
            key, val = line.split(":", 1)
            map[trim(key)] = trim(val)
        elif re.match(r'\s*Level: (\d+)\s*', line):
            level = int(re.match(r'\s*Level: (\d+)\s*', line).group(1))
    print(main_dict.keys())
    for key in main_dict.keys():
        pd.DataFrame.from_dict(main_dict[key]).to_csv(key+'.csv')



